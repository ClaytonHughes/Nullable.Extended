using System;
using System.Collections.Generic;
using System.Composition;
using System.Linq;
using System.Threading.Tasks;

using Microsoft.CodeAnalysis;

using TomsToolbox.Composition;

namespace Nullable.Extended.Extension.AnalyzerFramework
{
    [Export(typeof(IAnalyzerEngine))]
    class AnalyzerEngine : IAnalyzerEngine
    {
        private readonly ICollection<ISyntaxTreeAnalyzer> _syntaxTreeAnalyzers;
        private readonly ICollection<ISyntaxAnalysisPostProcessor> _postProcessors;

        public AnalyzerEngine(IExportProvider exportProvider)
        {
            _syntaxTreeAnalyzers = exportProvider.GetExportedValues<ISyntaxTreeAnalyzer>().ToArray();
            _postProcessors = exportProvider.GetExportedValues<ISyntaxAnalysisPostProcessor>().ToArray();
        }

        public async Task<IReadOnlyCollection<AnalysisResult>> AnalyzeAsync(IEnumerable<Document> documents)
        {
            var documentTasks = documents.Select(AnalyzeDocumentAsync);

            IEnumerable<AnalysisResult> analysisResults = (await Task.WhenAll(documentTasks))
                .SelectMany(r => r);

            var resultsByProject = analysisResults.GroupBy(result => result.AnalysisContext.Document.Project);

            var projectTasks = resultsByProject.Select(PostProcessProjectAsync);

            analysisResults = (await Task.WhenAll(projectTasks))
                .SelectMany(r => r)
                .GroupBy(r => r.Position)
                .Select(g => g.OrderBy(r => r).First());

            return analysisResults.ToList().AsReadOnly();
        }

        private async Task<IReadOnlyCollection<AnalysisResult>> PostProcessProjectAsync(IGrouping<Project, AnalysisResult> analysisResults)
        {
            var project = analysisResults.Key;

            IReadOnlyCollection<AnalysisResult> results = analysisResults.ToArray();

            foreach (var analyzer in _postProcessors)
            {
                results = await analyzer.PostProcessAsync(project, results);
            }

            return results;
        }

        private Task<IReadOnlyCollection<AnalysisResult>> AnalyzeDocumentAsync(Document document)
        {
            return Task.Run(async () =>
            {
                var syntaxTree = await document.GetSyntaxTreeAsync();
                if (syntaxTree == null)
                    return (IReadOnlyCollection<AnalysisResult>)Array.Empty<AnalysisResult>();

                var syntaxRoot = await syntaxTree.GetRootAsync();
                if (syntaxRoot.BeginsWithAutoGeneratedComment())
                    return Array.Empty<AnalysisResult>();

                var tasks = _syntaxTreeAnalyzers
                    .Select(analyzer => analyzer.AnalyzeAsync(new AnalysisContext(document, syntaxTree, syntaxRoot)));

                var results = await Task.WhenAll(tasks);

                return results
                    .SelectMany(r => r)
                    .ToArray();
            });
        }
    }
}